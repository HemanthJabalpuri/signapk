#!/usr/bin/env python3

# Sign zip files with testkey for flashing in Android recovery
# this is a Python port of Java source
# depends on Python 3.5.3+ and `pycryptodome` module
#
# Author : HemanthJabalpuri
# Date   : 19th October 2023

import argparse, binascii, os, sys


def abort(msg):
    sys.exit(msg)


try:
    from Crypto.Hash import SHA1
#   from Crypto.IO import PKCS8
    from Crypto.PublicKey import RSA
    from Crypto.Signature import pkcs1_15
except ImportError:
    abort('\nInstall PyCryptodome module using "pip install pycryptodome"\n')


def hex2bin(hex_str):
    return binascii.unhexlify(hex_str)


def wite_comment(of, h):
#   script_dir = os.path.dirname(os.path.abspath(__file__))
#   sbt = open(os.path.join(script_dir, 'testkey.sbt'), 'rb').read()
#   pk8 = open(os.path.join(script_dir, 'testkey.pk8'), 'rb').read()
#   key = RSA.import_key(PKCS8.unwrap(pk8)[1])
    sbt = '308206ae06092a864886f70d010702a082069f3082069b020101310b300906052b0e03021a0500300b06092a864886f70d010701a08204ac308204a830820390a003020102020900936eacbe07f201df300d06092a864886f70d0101050500308194310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e20566965773110300e060355040a1307416e64726f69643110300e060355040b1307416e64726f69643110300e06035504031307416e64726f69643122302006092a864886f70d0109011613616e64726f696440616e64726f69642e636f6d301e170d3038303232393031333334365a170d3335303731373031333334365a308194310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e20566965773110300e060355040a1307416e64726f69643110300e060355040b1307416e64726f69643110300e06035504031307416e64726f69643122302006092a864886f70d0109011613616e64726f696440616e64726f69642e636f6d30820120300d06092a864886f70d01010105000382010d00308201080282010100d6931904dec60b24b1edc762e0d9d8253e3ecd6ceb1de2ff068ca8e8bca8cd6bd3786ea70aa76ce60ebb0f993559ffd93e77a943e7e83d4b64b8e4fea2d3e656f1e267a81bbfb230b578c20443be4c7218b846f5211586f038a14e89c2be387f8ebecf8fcac3da1ee330c9ea93d0a7c3dc4af350220d50080732e0809717ee6a053359e6a694ec2cb3f284a0a466c87a94d83b31093a67372e2f6412c06e6d42f15818dffe0381cc0cd444da6cddc3b82458194801b32564134fbfde98c9287748dbf5676a540d8154c8bbca07b9e247553311c46b9af76fdeeccc8e69e7c8a2d08e782620943f99727d3c04fe72991d99df9bae38a0b2177fa31d5b6afee91f020103a381fc3081f9301d0603551d0e04160414485900563d272c46ae118605a47419ac09ca8c113081c90603551d230481c13081be8014485900563d272c46ae118605a47419ac09ca8c11a1819aa48197308194310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e20566965773110300e060355040a1307416e64726f69643110300e060355040b1307416e64726f69643110300e06035504031307416e64726f69643122302006092a864886f70d0109011613616e64726f696440616e64726f69642e636f6d820900936eacbe07f201df300c0603551d13040530030101ff300d06092a864886f70d010105050003820101007aaf968ceb50c441055118d0daabaf015b8a765a27a715a2c2b44f221415ffdace03095abfa42df70708726c2069e5c36eddae0400be29452c084bc27eb6a17eac9dbe182c204eb15311f455d824b656dbe4dc2240912d7586fe88951d01a8feb5ae5a4260535df83431052422468c36e22c2a5ef994d61dd7306ae4c9f6951ba3c12f1d1914ddc61f1a62da2df827f603fea5603b2c540dbd7c019c36bab29a4271c117df523cdbc5f3817a49e0efa60cbd7f74177e7a4f193d43f4220772666e4c4d83e1bd5a86087cf34f2dec21e245ca6c2bb016e683638050d2c430eea7c26a1c49d3760a58ab7f1a82cc938b4831384324bd0401fa12163a50570e684d318201ca308201c60201013081a2308194310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e20566965773110300e060355040a1307416e64726f69643110300e060355040b1307416e64726f69643110300e06035504031307416e64726f69643122302006092a864886f70d0109011613616e64726f696440616e64726f69642e636f6d020900936eacbe07f201df300906052b0e03021a0500300d06092a864886f70d010101050004820100'
    der = '308204a30201000282010100d6931904dec60b24b1edc762e0d9d8253e3ecd6ceb1de2ff068ca8e8bca8cd6bd3786ea70aa76ce60ebb0f993559ffd93e77a943e7e83d4b64b8e4fea2d3e656f1e267a81bbfb230b578c20443be4c7218b846f5211586f038a14e89c2be387f8ebecf8fcac3da1ee330c9ea93d0a7c3dc4af350220d50080732e0809717ee6a053359e6a694ec2cb3f284a0a466c87a94d83b31093a67372e2f6412c06e6d42f15818dffe0381cc0cd444da6cddc3b82458194801b32564134fbfde98c9287748dbf5676a540d8154c8bbca07b9e247553311c46b9af76fdeeccc8e69e7c8a2d08e782620943f99727d3c04fe72991d99df9bae38a0b2177fa31d5b6afee91f02010302820101008f0cbb589484076dcbf3da41eb3be56e297f339df213ecaa045dc5f07dc5de47e25049c4b1c4f34409d20a662391553b7efa70d7eff028dcedd098a9c1e2998f4bec451abd2a76cb23a5d6ad827edda165d02f4e160e59f57b16345bd7297affb47f350a872d3c149775dbf1b7e06fd7e831f78ac15e355aaf774055ba0ff44575a286798e35c533b40276e44e5836a1da7564adfaf538a493a9bf10f213a657ac12291c1be56997fc6ad27b99a7fc8977d2654cebaa7c753b9cda4c64671a8ee8fd476b7ee2c37e95579d70441e6fab93a413ab664ac998fa25943f2b52c1f9c5ea64ef4a1bca0149e717a214017896080c48a407dc4776cbde96bd4ca1847b02818100eac099171c9b95278c07bf9e974518855791769ea7b52bf6ba93e0d6a848c4a70d18a6e8a8a2da5368676b33bef298bb144d9af8b5bbad2246f42c2ccd7476eab21be14a771f92e7adf600b5932af747f7b9775587110ab0d8032318768b586af17c6dc4fd40a8181e85876f5f0a2cbdbb03869f2179ab5570a7597a757b619b02818100e9fef71934a8af3799e712ab979d5e027596ad8d69156649961ce4a2ad082f186224344d2b888914a9cc9ded476f302edc4ee65bea77bd91f2f04c3f34ba09b6394428fbb4e0555bc6cf4eec0e61437e00037cedcb19be598fb14b1732604d41363272fa3429e87f651d11228166377ed2c9a8190b5c9b8fdd2de1c5029140cd028181009c80660f6867b8c508052a69ba2e1058e50ba469c52372a47c6295e47030831a08bb19f0706c918cf044f2227f4c65d20d8911fb23d2736c2f4d72c888f84f472167eb86fa150c9a73f955ce621ca4daa5264f8e5a0b5c75e5576cbaf9b23af1f652f3d8a8d5c56569ae5a4a3f5c1dd3d20259bf6ba67238f5c4e651a3a79667028181009bff4f66231b1f7a669a0c7265139401a3b9c908f0b8eedbb968986c735aca10416d7833725b060dc6886948da4a201f3d89eee7f1a5290bf74add7f787c06797b82c5fd234038e7d9df89f2b440d7a95557a89e87667ee65fcb8764cc403380cecc4ca6cd7145aa4368b61700eecfa9e1dbc5660793125fe8c9412e01b62b33028180632aadd91adda462d995a672625b05cda94621f4e95973ee8f9a2deb71a1c1ac1bd31a0dd6a28975871b6a7beb6e5561b4a12c60a3a469ef7a77582b35c7f855b9b76ccacfc0774845fea9452fb1e3a98c05fb9aa7526819c5c4498e0dc1db1ba58a3bd4fb8183291e34768eda7ab4058726fd1c8d147b8965df8f15f39ebc37'
    key = RSA.import_key(hex2bin(der))

    of.write(hex2bin('ca06'))
    of.write(b'signed by SignApk')
    of.write(hex2bin('00'))
    of.write(hex2bin(sbt))
    of.write(pkcs1_15.new(key).sign(h))
    of.write(hex2bin('b806ffffca06'))


def copy_and_hash(f, of, fsize):
    h = SHA1.new()
    bufsize = 64 * 1024
    tempsize = fsize - 2
    while tempsize > 0:
        if tempsize < bufsize:
            bufsize = tempsize
        buf = f.read(bufsize)
        tempsize -= bufsize
        of.write(buf)
        h.update(buf)
    return h


def check_comment(f, fsize):
    f.seek(fsize - 22)
    tail = f.read(3)
    if tail[0] != 0x50 or tail[1] != 0x4b or tail[2] != 0x05:
        abort('zip data already has an archive comment')
    f.seek(0)


def sign(inf, outf):
    fsize = os.stat(inf).st_size

    with open(inf, 'rb') as f:
        check_comment(f, fsize)
        with open(outf, 'wb') as of:
            h = copy_and_hash(f, of, fsize)
            wite_comment(of, h)


if __name__ == '__main__':
    if not sys.version_info >= (3, 5, 3):
        abort('Requires Python 3.5.3+')
    parser = argparse.ArgumentParser()
    parser.add_argument('infile', help='input zip file path to sign')
    parser.add_argument('outfile', help='output zip file path to store signed file')
    args = parser.parse_args()
    sign(args.infile, args.outfile)
